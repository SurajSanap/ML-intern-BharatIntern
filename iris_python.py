# -*- coding: utf-8 -*-
"""Iris_Flower_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hbisFTCDgt_A5EXuBNb1mgItpmFXyJ7k

# Task 1 : Iris Flower Classification

# Name of Intern :Suraj Rajendra Sanap
"""

# Commented out IPython magic to ensure Python compatibility.
#import libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %pip install scikit-learn
import sklearn

data=pd.read_csv("Iris.csv")

data

data.shape

data.columns

data.describe()

data.isnull().sum()

data.Species.value_counts()

"""# Exploratory Data Analysis - EDA"""

#Sepal length distribution
plt.figure(figsize=(6,6))
sns.distplot(data["SepalLengthCm"],color="red")
plt.show()

#sepal width distribution
plt.figure(figsize=(6,6))
sns.distplot(data['SepalWidthCm'],color="red")
plt.show()

#petal length distribution
plt.figure(figsize=(6,6))
sns.distplot(data['PetalLengthCm'],color="red")
plt.show()

#petal width distribution
plt.figure(figsize=(6,6))
sns.distplot(data['PetalWidthCm'],color="red")
plt.show()

plt.figure(figsize=(6, 6))
sns.countplot(x='Species', data=data, palette="rainbow")
plt.show()

#Pairplot
sns.pairplot(data,hue='Species')
plt.show()

# Remove the 'Species' column before creating the heatmap
data_numeric = data.drop('Species', axis=1)
# Create a correlation heatmap
sns.heatmap(data_numeric.corr(), annot=True)
plt.show()

#Split & define feature and target
x = data.drop(columns=['Species','Id'])
y=data['Species']

print(x)

print(y)

x.shape,y.shape

"""# train test split"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

x_train.shape,x_test.shape

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier

"""# Logistic regression"""

lr=LogisticRegression()
lr.fit(x_train,y_train)

lr_y_pred = lr.predict(x_test)
lr_y_pred

lr_results = confusion_matrix(y_test,lr_y_pred)
print("confusion matrix: ")
print(lr_results)
print(accuracy_score(y_test,lr_y_pred))

"""# Decision tree"""

DT=DecisionTreeClassifier()
DT.fit(x_train,y_train)

DT_y_pred = DT.predict(x_test)
DT_y_pred

DT_results = confusion_matrix(y_test,DT_y_pred)
print("confusion matrix: ")
print(DT_results)
print(accuracy_score(y_test,DT_y_pred))

"""Pikle"""

import pickle

# Save the trained TfidfVectorizer as 'tfidf.pkl'
pickle.dump(DT, open('DTmodel.pkl', 'wb'))
pickle.dump(lr, open('LRmodel.pkl', 'wb'))



import pickle
import numpy as np

# Initialize an empty list to store the input values
data_list = []

# Get user input for SepalLengthCm
sepal_length = float(input("Enter Sepal Length (in cm): "))
data_list.append(sepal_length)

# Get user input for SepalWidthCm
sepal_width = float(input("Enter Sepal Width (in cm): "))
data_list.append(sepal_width)

# Get user input for PetalLengthCm
petal_length = float(input("Enter Petal Length (in cm): "))
data_list.append(petal_length)

# Get user input for PetalWidthCm
petal_width = float(input("Enter Petal Width (in cm): "))
data_list.append(petal_width)

print("Data collected:", data_list)

# Convert the input data list to a numpy array and reshape it to be a 2D array
inputs = np.array(data_list).reshape(1, -1)

# Load the trained classifier (replace 'DTmodel.pkl' with the actual path to your trained model)
model = pickle.load(open('DTmodel.pkl', 'rb'))
# Make a prediction using the trained model
prediction = model.predict(inputs)

print("Predicted class:", prediction[0])





